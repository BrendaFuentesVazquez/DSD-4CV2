package com.distpaint;

import com.distpaint.mensajes.ActividadUsuario;
import com.distpaint.mensajes.PropiedadesCapa;
import com.distpaint.mensajes.MensajeTexto;
import com.distpaint.mensajes.PropiedadesColor;
import com.distpaint.mensajes.Registrador;
import com.esotericsoftware.kryonet.Client;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class Cliente extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(Cliente.class.getCanonicalName());
    protected Client cliente;
    protected String nombreUsuario;
    private DefaultListModel modeloChat;
    private DefaultListModel modeloCapas;
    private final LienzoCompartido lienzo;
    private final DialogoDibujo dialogoDibujo;
    private Cursor editCursor = Cursor.getDefaultCursor();

    public Cliente() {
        initComponents();
        this.modeloChat = new DefaultListModel();
        this.modeloCapas = new DefaultListModel();
        this.lienzo = new LienzoCompartido(botonMover);
        this.botonMover.setVisible(false);

        this.contenedorLienzo.setLayout(new BorderLayout());
        this.contenedorLienzo.add(this.lienzo);
        this.dialogoDibujo = new DialogoDibujo(lienzo);

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image image = toolkit.getImage("icons/edit.png");
        editCursor = toolkit.createCustomCursor(image, new Point(16, 16), "edit");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedorLienzo = new javax.swing.JPanel();
        herramientasPaint = new javax.swing.JToolBar();
        botonSeleccionar = new javax.swing.JButton();
        botonLapiz = new javax.swing.JButton();
        botonTexto = new javax.swing.JButton();
        botonCirculo = new javax.swing.JButton();
        botonImagenes = new javax.swing.JButton();
        botonTriangulo = new javax.swing.JButton();
        botonRectangulo = new javax.swing.JButton();
        botonPoligono = new javax.swing.JButton();
        botonMover = new javax.swing.JButton();
        campoMensaje = new javax.swing.JTextField();
        scrollCapas = new javax.swing.JScrollPane();
        listaCapas = new javax.swing.JList<>();
        scrollUsuarios = new javax.swing.JScrollPane();
        listaUsuariosActivos = new javax.swing.JList<>();
        jToolBar1 = new javax.swing.JToolBar();
        botonCapaSubir = new javax.swing.JButton();
        botonCapaBajar = new javax.swing.JButton();
        botonCapaNueva = new javax.swing.JButton();
        botonCapaBorrar = new javax.swing.JButton();
        botonCapaRedim = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionConexion = new javax.swing.JMenuItem();
        opcionNuevoLienzo = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint distribuido: desconectado");

        javax.swing.GroupLayout contenedorLienzoLayout = new javax.swing.GroupLayout(contenedorLienzo);
        contenedorLienzo.setLayout(contenedorLienzoLayout);
        contenedorLienzoLayout.setHorizontalGroup(
            contenedorLienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );
        contenedorLienzoLayout.setVerticalGroup(
            contenedorLienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        herramientasPaint.setFloatable(false);
        herramientasPaint.setOrientation(javax.swing.SwingConstants.VERTICAL);
        herramientasPaint.setRollover(true);

        botonSeleccionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/select.png"))); // NOI18N
        botonSeleccionar.setFocusable(false);
        botonSeleccionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSeleccionar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonSeleccionar);

        botonLapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/pencil.png"))); // NOI18N
        botonLapiz.setFocusable(false);
        botonLapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLapizActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonLapiz);

        botonTexto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/text.png"))); // NOI18N
        botonTexto.setActionCommand("Texto");
        botonTexto.setFocusable(false);
        botonTexto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTexto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTextoActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonTexto);

        botonCirculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/circle.png"))); // NOI18N
        botonCirculo.setFocusable(false);
        botonCirculo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCirculo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCirculoActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonCirculo);

        botonImagenes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/image.png"))); // NOI18N
        botonImagenes.setToolTipText("");
        botonImagenes.setFocusable(false);
        botonImagenes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonImagenes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonImagenesActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonImagenes);

        botonTriangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/triangle.png"))); // NOI18N
        botonTriangulo.setFocusable(false);
        botonTriangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTriangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTriangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTrianguloActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonTriangulo);

        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/square.png"))); // NOI18N
        botonRectangulo.setToolTipText("");
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonRectangulo);

        botonPoligono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/polygon.png"))); // NOI18N
        botonPoligono.setFocusable(false);
        botonPoligono.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPoligono.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPoligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPoligonoActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonPoligono);

        botonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/mover.png"))); // NOI18N
        botonMover.setFocusable(false);
        botonMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMoverActionPerformed(evt);
            }
        });
        herramientasPaint.add(botonMover);

        campoMensaje.setEnabled(false);
        campoMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMensajeActionPerformed(evt);
            }
        });

        listaCapas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaCapasValueChanged(evt);
            }
        });
        scrollCapas.setViewportView(listaCapas);

        scrollUsuarios.setViewportView(listaUsuariosActivos);

        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        botonCapaSubir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/move_up.png"))); // NOI18N
        botonCapaSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapaSubirActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCapaSubir);

        botonCapaBajar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/move_down.png"))); // NOI18N
        botonCapaBajar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapaBajarActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCapaBajar);

        botonCapaNueva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/add.png"))); // NOI18N
        botonCapaNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapaNuevaActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCapaNueva);

        botonCapaBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/remove.png"))); // NOI18N
        botonCapaBorrar.setToolTipText("");
        botonCapaBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapaBorrarActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCapaBorrar);

        botonCapaRedim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/distpaint/icons/resize.png"))); // NOI18N
        botonCapaRedim.setToolTipText("");
        botonCapaRedim.setFocusable(false);
        botonCapaRedim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCapaRedim.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCapaRedim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapaRedimActionPerformed(evt);
            }
        });
        jToolBar1.add(botonCapaRedim);

        menuArchivo.setText("Archivo");

        opcionConexion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        opcionConexion.setText("Conectar con servidor");
        opcionConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionConexionActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionConexion);

        opcionNuevoLienzo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        opcionNuevoLienzo.setText("Nuevo lienzo");
        opcionNuevoLienzo.setEnabled(false);
        opcionNuevoLienzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoLienzoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNuevoLienzo);

        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionSalir);

        menu.add(menuArchivo);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(herramientasPaint, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorLienzo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollUsuarios, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollCapas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(campoMensaje))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(herramientasPaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contenedorLienzo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollCapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollUsuarios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcionConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionConexionActionPerformed
        if (cliente != null && cliente.isConnected()) {
            this.cliente.close();
            this.opcionConexion.setText("Conectar con servidor");
            setTitle("Paint distribuido: desconectado");
        } else {

            JTextField campoServidor = new JTextField(20);
            campoServidor.setText("127.0.0.1");

            JTextField campoPuertoTCP = new JTextField(6);
            campoPuertoTCP.setText("54555");

            JTextField campoPuertoUDP = new JTextField(6);
            campoPuertoUDP.setText("54777");

            JPanel panelEntradas = new JPanel();
            panelEntradas.add(new JLabel("IP/Host Servidor: "));
            panelEntradas.add(campoServidor);

            panelEntradas.add(Box.createHorizontalStrut(15));

            panelEntradas.add(new JLabel("Puerto TCP: "));
            panelEntradas.add(campoPuertoTCP);

            panelEntradas.add(new JLabel("Puerto UDP: "));
            panelEntradas.add(campoPuertoUDP);

            int result = JOptionPane.showConfirmDialog(this, panelEntradas,
                    "Ingrese los datos de la conexión", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    String hostname = campoServidor.getText();
                    Integer puertoTCP = Integer.parseInt(campoPuertoTCP.getText());
                    Integer puertoUDP = Integer.parseInt(campoPuertoUDP.getText());
                    LOG.info(String.format("Intenando conexion con: %s, puertos: tcp=%d, udp=%d",
                            hostname, puertoTCP, puertoUDP));

                    cliente = new Client(65535, 65535);
                    Registrador.registrarClases(cliente.getKryo());

                    cliente.start();
                    cliente.addListener(new ManejadorCliente());
                    cliente.connect(5000, hostname, puertoTCP, puertoUDP);

                    this.opcionConexion.setText("Cancelar intento de conexion");
                    setTitle("Intentando conectar con: " + hostname);
                } catch (NumberFormatException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Ingrese solamente enteros en el puerto TCP/UDP",
                            "Error de entrada", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "No se pudo conectar con el servidor",
                            "Error de conexion", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_opcionConexionActionPerformed

    private void campoMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMensajeActionPerformed
        String mensaje = this.campoMensaje.getText();
        LOG.log(Level.INFO, "Enviando mensaje: {0}", mensaje);
        if (this.cliente != null) {
            this.cliente.sendTCP(new MensajeTexto(nombreUsuario, mensaje));
            this.campoMensaje.setText("");
        }
    }//GEN-LAST:event_campoMensajeActionPerformed

    private void botonLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLapizActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_LAPIZ);
        this.dialogoDibujo.setVisible(true);

        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonLapizActionPerformed

    private void botonTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTextoActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_TEXTO);
        this.dialogoDibujo.setVisible(true);

        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonTextoActionPerformed

    private void botonCirculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCirculoActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_CIRCULO);
        this.dialogoDibujo.setVisible(true);

        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonCirculoActionPerformed

    private void botonTrianguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTrianguloActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_TRIANGULO);
        this.dialogoDibujo.setVisible(true);

        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonTrianguloActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_RECTANGULO);
        this.dialogoDibujo.setVisible(true);

        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonImagenesActionPerformed
        JFileChooser fc = new JFileChooser();
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            Image image;
            try {
                image = ImageIO.read(file);
                this.lienzo.importarImagen(file.getName(), image);
                this.lienzo.setCursor(editCursor);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error al cargar la imagen", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_botonImagenesActionPerformed

    private void opcionNuevoLienzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoLienzoActionPerformed
        String nuevaDimension = JOptionPane.showInputDialog(this, "Nueva dimension:", "500x500");
        if (nuevaDimension == null) {
            return;
        }

        if (!nuevaDimension.matches("[\\d]+x[\\d]+")) {
            JOptionPane.showMessageDialog(this, "El formato debe ser ANCHOxALTO en pixeles (enteros positivos)", "Error de entrada", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String componentes[] = nuevaDimension.split("x");
        Integer nuevoLargo = Integer.valueOf(componentes[0]);
        Integer nuevoAlto = Integer.valueOf(componentes[1]);

        PropiedadesCapa props = new PropiedadesCapa();
        props.version = 0;
        props.objetivo = 0;
        props.largo = nuevoLargo;
        props.alto = nuevoAlto;
        props.origenX = 0;
        props.origenY = 0;
        props.colorFondo = PropiedadesColor.COLOR_BLANCO;

        this.lienzo.nuevoLienzo(props);
    }//GEN-LAST:event_opcionNuevoLienzoActionPerformed

    private void botonPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPoligonoActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_POLIGONO);
        this.dialogoDibujo.setVisible(true);
        this.lienzo.setCursor(editCursor);
    }//GEN-LAST:event_botonPoligonoActionPerformed

    private void botonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMoverActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_MOVER);
        this.lienzo.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    }//GEN-LAST:event_botonMoverActionPerformed

    private void botonSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarActionPerformed
        this.lienzo.setHerramienta(LienzoCompartido.HERRAMIENTA_SELECCIONAR);
        this.lienzo.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_botonSeleccionarActionPerformed

    private void listaCapasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaCapasValueChanged
        this.lienzo.seleccionarCapa(listaCapas.getSelectedIndex(), false);
    }//GEN-LAST:event_listaCapasValueChanged

    private void botonCapaSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapaSubirActionPerformed
        this.lienzo.intercambiarCapa(listaCapas.getSelectedIndex(), listaCapas.getSelectedIndex() - 1);
    }//GEN-LAST:event_botonCapaSubirActionPerformed

    private void botonCapaBajarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapaBajarActionPerformed
        this.lienzo.intercambiarCapa(listaCapas.getSelectedIndex(), listaCapas.getSelectedIndex() + 1);
    }//GEN-LAST:event_botonCapaBajarActionPerformed

    private void botonCapaNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapaNuevaActionPerformed
        String nuevaDimension = JOptionPane.showInputDialog(this, "Tamaño de la nueva capa:", "500x500");
        if (nuevaDimension == null) {
            return;
        }

        if (!nuevaDimension.matches("[\\d]+x[\\d]+")) {
            JOptionPane.showMessageDialog(this, "El formato debe ser ANCHOxALTO en pixeles (enteros positivos)", "Error de entrada", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String componentes[] = nuevaDimension.split("x");
        Integer largo = Integer.valueOf(componentes[0]);
        Integer alto = Integer.valueOf(componentes[1]);
        this.lienzo.nuevaCapaVacia(String.format("Nueva capa de %dx%d", largo, alto), largo, alto);
    }//GEN-LAST:event_botonCapaNuevaActionPerformed

    private void botonCapaBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapaBorrarActionPerformed
        this.lienzo.borraCapa(listaCapas.getSelectedIndex());
    }//GEN-LAST:event_botonCapaBorrarActionPerformed

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void botonCapaRedimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapaRedimActionPerformed
        String nuevaDimension = JOptionPane.showInputDialog(this, "Tamaño de la nueva capa:", "500x500");
        if (nuevaDimension == null) {
            return;
        }

        if (!nuevaDimension.matches("[\\d]+x[\\d]+")) {
            JOptionPane.showMessageDialog(this, "El formato debe ser ANCHOxALTO en pixeles (enteros positivos)", "Error de entrada", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String componentes[] = nuevaDimension.split("x");
        Integer largo = Integer.valueOf(componentes[0]);
        Integer alto = Integer.valueOf(componentes[1]);

        this.lienzo.redimensionaCapa(listaCapas.getSelectedIndex(), largo, alto);
    }//GEN-LAST:event_botonCapaRedimActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Cliente().setVisible(true);
        });
    }

    private class ManejadorCliente extends Listener implements LienzoCompartido.CapaListener {

        @Override
        public void disconnected(Connection cnctn) {
            super.disconnected(cnctn);

            opcionConexion.setText("Conectar con servidor");
            setTitle("Paint distribuido: desconectado");
            modeloChat = new DefaultListModel();
            modeloCapas = new DefaultListModel();
            campoMensaje.setEnabled(false);
            listaUsuariosActivos.setModel(modeloChat);
            opcionNuevoLienzo.setEnabled(false);
        }

        @Override
        public void connected(Connection connection) {
            super.connected(connection);
            LOG.info("Conectado con servidor, enviando nombre de usuario");
            String nombreElegido = JOptionPane.showInputDialog("Ingrese nombre de usuario: ");
            nombreUsuario = nombreElegido;
            connection.sendTCP(new ActividadUsuario(nombreUsuario, true));
            setTitle(String.format("Paint Distribuido: conectado con %s como %s",
                    connection.getRemoteAddressTCP(), nombreUsuario));
            opcionConexion.setText("Desconectar del servidor");

            modeloChat = new DefaultListModel();
            modeloCapas = new DefaultListModel();
            campoMensaje.setEnabled(true);
            opcionNuevoLienzo.setEnabled(true);
            listaUsuariosActivos.setModel(modeloChat);
            lienzo.setCliente(cliente);
            lienzo.setEventosCapas(this);
        }

        @Override
        public void received(Connection connection, Object object) {
            super.received(connection, object);

            if (object instanceof MensajeTexto) {
                MensajeTexto mensaje = (MensajeTexto) object;
                LOG.log(Level.INFO, "Mensaje recibido: {0}", mensaje);

                modeloChat.addElement(mensaje.toString());
                listaUsuariosActivos.setModel(modeloChat);
            }
        }

        @Override
        public void capaAgregada(LienzoCompartido.Capa capa) {
            if (capa != null) {
                modeloCapas.addElement(capa.propiedades.getNombre());
                listaCapas.setModel(modeloCapas);
            }
        }

        @Override
        public void capaSeleccionada(LienzoCompartido.Capa capa) {
            if (capa != null) {
                listaCapas.setSelectedIndex(capa.propiedades.objetivo);
            }
        }

        @Override
        public void capaBorrada(LienzoCompartido.Capa capa) {
            modeloCapas = new DefaultListModel();
            for (LienzoCompartido.Capa c : lienzo.getCapas()) {
                modeloCapas.addElement(c.propiedades.getNombre());
            }

            listaCapas.setModel(modeloCapas);
        }

        @Override
        public void todasLasCapasBorradas() {
            modeloCapas = new DefaultListModel();
            listaCapas.setModel(modeloCapas);
        }

        @Override
        public void capaIntercambiada(LienzoCompartido.Capa origen, LienzoCompartido.Capa destino) {
            modeloCapas = new DefaultListModel();
            for (LienzoCompartido.Capa c : lienzo.getCapas()) {
                modeloCapas.addElement(c.propiedades.getNombre());
            }

            listaCapas.setModel(modeloCapas);
            lienzo.seleccionarCapa(origen.propiedades.objetivo, true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCapaBajar;
    private javax.swing.JButton botonCapaBorrar;
    private javax.swing.JButton botonCapaNueva;
    private javax.swing.JButton botonCapaRedim;
    private javax.swing.JButton botonCapaSubir;
    private javax.swing.JButton botonCirculo;
    private javax.swing.JButton botonImagenes;
    private javax.swing.JButton botonLapiz;
    private javax.swing.JButton botonMover;
    private javax.swing.JButton botonPoligono;
    private javax.swing.JButton botonRectangulo;
    private javax.swing.JButton botonSeleccionar;
    private javax.swing.JButton botonTexto;
    private javax.swing.JButton botonTriangulo;
    private javax.swing.JTextField campoMensaje;
    private javax.swing.JPanel contenedorLienzo;
    private javax.swing.JToolBar herramientasPaint;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList<String> listaCapas;
    private javax.swing.JList<String> listaUsuariosActivos;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem opcionConexion;
    private javax.swing.JMenuItem opcionNuevoLienzo;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JScrollPane scrollCapas;
    private javax.swing.JScrollPane scrollUsuarios;
    // End of variables declaration//GEN-END:variables
}
